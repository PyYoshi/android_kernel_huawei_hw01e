#!/usr/bin/perl -w

use strict;
use Spreadsheet::ParseExcel;
use Cwd;

sub my_main()
{
    #get product excel list
	my $gpio_config_xls;
	my @product_name_list;
	my @dirs;
	my $xls_dir_temp;
	
    #get the work directory for gpio_config
    my $root_dir = prepare_perl_dir();

    #get the config excel directory
    #my $xls_dir = @ARGV[0];

    #if you want to debug the perl file,you can choose this sentence,and delete the above one.
    my $xls_dir = "../../../../device/huawei/customize/hsad";
	
	#search each files under th path of "device/huawei/customize/hsad",and find out all the gpio config excels.
	opendir(DIRHANDLE,"$xls_dir") || die "product directory not exist";
	@dirs = readdir(DIRHANDLE);
	
	foreach my $dir (@dirs)
	{	
		if(!($dir=~ m/^\./))
		{
			if(-d "$xls_dir/$dir")
			{
				opendir(GPIO_DIR, "$xls_dir/$dir") || die "product directory not exist";

    			#get all of the product's name
				foreach $_(sort readdir(GPIO_DIR))
			    { 
			        if(/hwgpio_(\w+).xls/)
			        {
						push(@product_name_list,$1);
			        }
			    }

			    closedir(GPIO_DIR);
			}
		}
	}
	closedir(DIRHANDLE);

	#search each files under th path of "device/huawei/customize/hsad",and handle each excel.
	opendir(DIRHANDLE,"$xls_dir") || die "product directory not exist";
	@dirs = readdir(DIRHANDLE);
	
	foreach my $dir (@dirs)
	{
		if(!($dir=~ m/^\./))
		{
			if(-d "$xls_dir/$dir")
			{
				opendir(GPIO_DIR, "$xls_dir/$dir") || die "product directory not exist";

			    #get all of the product gpio config excel and read the excel content
			    foreach $_ (sort readdir(GPIO_DIR))
			    { 
			        if(/hwgpio_(\w+).xls/)
			        {
			            $gpio_config_xls = $_;

			            $xls_dir_temp = "$xls_dir/$dir";

			            #read the excel content and export the gpios config
			            gpio_gen_config($root_dir,$xls_dir_temp,$gpio_config_xls,@product_name_list);
			        }
			    }
			    closedir(GPIO_DIR);
			}
		}
	}
	closedir(DIRHANDLE);    
}

sub prepare_perl_dir()
{
    my $work_dir = getcwd();

    my @dirs = split /\//, $work_dir;
    pop(@dirs);
    $work_dir = join "/", @dirs;
    return $work_dir;
}

sub gpio_gen_config()
{
	#input parameters
	my ($root_dir,$xls_dir,$gpio_config_xls,@product_name_list) = @_;

	my $gpio_config_file = $gpio_config_xls;
	$gpio_config_file =~ s/\.xls$/\.c/;

	#the path of hwgpio_xxxx.xls
	my $config_xls_path = "$xls_dir/$gpio_config_xls";
	    
	#The target file name, such as hwgpio_lighting.c
	my $hw_gpio_handle;
	    
	#GPIO drive strength list
	my %strength_list;
		
	my $product_name;

	#get the product name
	if($gpio_config_xls =~ /hwgpio_(\w+).xls/)
	{
		$product_name = $1;		
	}

	#Open the target file
	open($hw_gpio_handle, ">$root_dir/gpio/$gpio_config_file") ||
	    die("Failed to open file $gpio_config_file for write!");
		
	my $oExcel = new Spreadsheet::ParseExcel;
	my $oBook = $oExcel->Parse($config_xls_path);

	#print message to the display window
	print "Now begin to process GPIO config file $config_xls_path...\n";
	    
	# select the sheet "GPIO Definition" page.
	my $msmgpio_osheet = $oBook->{Worksheet}[1];
	my $pmgpio_osheet = $oBook->{Worksheet}[2];
	    
	#Show the progress bar
	print "Now begin to config gpio!\n";
	     
    #Show the head of target file
    print $hw_gpio_handle "/*The file is auto generated by tools, don't modify it manully.*/\n\n";
	print $hw_gpio_handle "#include <hsad/config_general_struct.h>\n";
 	print $hw_gpio_handle "#include <hsad/config_boardids.h>\n\n";
	print $hw_gpio_handle "#include <linux/mfd/pm8xxx/gpio.h>\n\n";	

	#get init config of msm gpio
	print "\n 1.Get the config of msm gpio from the excel sheet..\n";
	gen_gpio_config_for_msm($hw_gpio_handle,$msmgpio_osheet,$product_name);

	#get pm gpio config
	print "\n 2.Get the config of pm gpio from the excel sheet..\n";
	gen_gpio_config_for_pmic($hw_gpio_handle,$pmgpio_osheet,$product_name);

	print "\n 3.creat total config table..\n";
	create_total_cfg_table($hw_gpio_handle,$product_name);

	#Close the output file
	close($hw_gpio_handle);

	print "\n 4.create config file for all product ..\n";
	create_cfg_file_for_all_product($root_dir,$msmgpio_osheet,$product_name,@product_name_list);
	    
	print "\n All have done, everything is OK!\n"
}

sub gen_gpio_config_for_msm()
{
	#input parameters
	my ($hw_gpio_handle, $Sheet, $product_name) = @_;

	my $line_index = 1;
	my $gpio_pin;
	my $init_strength;
	my $init_function;
	my $init_out_value;
	my $init_macro;
	my $init_pull;
	my $init_direction;
	my $sleep_strength;
	my $sleep_function;
	my $sleep_out_value;
	my $sleep_macro;
	my $sleep_pull;
	my $sleep_direction;
	my $gpio_number;
	my $gpio_name;
	my $blank_name;

	my %pull_map =
	(
		"NO PULL" => "GPIOMUX_PULL_NONE",
		"PULL DOWN" => "GPIOMUX_PULL_DOWN",
		"PULL UP" => "GPIOMUX_PULL_UP",
		"KEEPER" => "GPIOMUX_PULL_KEEPER",
		"NOSET"   => "NOSET"
	);

	my %macro_map;

	my $mark = "\"";
    
    printf $hw_gpio_handle "struct gpio_config_type %s_gpio_config_table[] = {\n",$product_name;
	printf $hw_gpio_handle "%-120s%s","/* * * * * * * * * * * * * * * * * * * * * * * active config * * * * * * * * * * * * * * * * * * * * * * * * * * * * ||"," * * * * * * * * * * * * suspend config  * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n";
	printf $hw_gpio_handle "%s%-29s%-9s%-23s%-21s%-23s%-23s%-23s%-21s%-23s%-21s\n","    /*","name","number","function","strength","pull","dir&&out_value ||","function","strength","pull","dir&&out_value */";

	while(1)
	{
		$gpio_pin                 = $Sheet->{Cells}[$line_index][0]->Value;
		$init_direction           = $Sheet->{Cells}[$line_index][1]->Value;
		$init_pull                  = $Sheet->{Cells}[$line_index][2]->Value;
		$init_function             = $Sheet->{Cells}[$line_index][4]->Value;
		$init_macro                = $Sheet->{Cells}[$line_index][5]->Value;
		$sleep_direction         = $Sheet->{Cells}[$line_index][7]->Value;
		$sleep_pull                = $Sheet->{Cells}[$line_index][8]->Value;
		$sleep_function            = $Sheet->{Cells}[$line_index][10]->Value;
		$sleep_macro               = $Sheet->{Cells}[$line_index][11]->Value;

		$gpio_number = $line_index - 1;

		$init_macro = "$mark$init_macro$mark";
		$sleep_macro = "$mark$sleep_macro$mark";
		$gpio_name = "$mark$mark";
		$blank_name = "$mark$mark";

        	#if the gpio choose qualcomm function,then give it a default gpio macro.
        	if($init_function ne "" )
        	{
			if($init_function ne "GPIOMUX_FUNC_GPIO" )
			{
				if($init_function =~ /(\w+)\((\w+)\)/)
				{
					$gpio_name = "$mark$1$mark";
				}
				else
				{
					die("!!!!ERROR  please enter the correct value of gpio init function!!!!\n");
				}
			}
			else
			{
				$gpio_name = $init_macro;
			}
		}

		if($sleep_function ne "" )
		{
			if($sleep_function ne "GPIOMUX_FUNC_GPIO" )
			{
				if($sleep_function =~ /(\w+)\((\w+)\)/)
				{
					$gpio_name = "$mark$1$mark";
				}
				else
				{
					die("!!!!ERROR  please enter the correct value of gpio sleep function!!!!\n");
				}
			}
			else 
			{
				$gpio_name = $sleep_macro;
			}
		}

		if($gpio_name eq $blank_name)
		{
			$gpio_name = $gpio_number;
		}
		
		$macro_map{$gpio_name} = $gpio_number;		

		#process next line until there is no gpio config
        	$line_index += 1;
        
        	print ".";
		
		#Test if we have read the end of excel file,
		if($line_index > $Sheet->{MaxRow})
		{
			last;
		}
	}

    #Get the config from the excel sheet for each
	foreach $gpio_name(sort keys %macro_map)
	{
		$gpio_number = $macro_map{$gpio_name};

		if ($gpio_number eq $gpio_name)
		{
			$gpio_name = "$mark$mark";
		}
		
		$line_index = $gpio_number + 1;
		
	        #get the value from the excel for each
	        $gpio_pin                 = $Sheet->{Cells}[$line_index][0]->Value;
	        $init_direction            = $Sheet->{Cells}[$line_index][1]->Value;
	        $init_pull                  = $Sheet->{Cells}[$line_index][2]->Value;
	        $init_strength             = $Sheet->{Cells}[$line_index][3]->Value;
	        $init_function             = $Sheet->{Cells}[$line_index][4]->Value;
	        $init_out_value            = $Sheet->{Cells}[$line_index][6]->Value;
	        $sleep_direction         = $Sheet->{Cells}[$line_index][7]->Value;
		 $sleep_pull                = $Sheet->{Cells}[$line_index][8]->Value;
	        $sleep_strength            = $Sheet->{Cells}[$line_index][9]->Value;
	        $sleep_function            = $Sheet->{Cells}[$line_index][10]->Value;     
	        $sleep_out_value           = $Sheet->{Cells}[$line_index][12]->Value;

	        print $hw_gpio_handle "    {";

		###=============================== initial config begin =============================###

		#PRINT STEP 1:print gpio name to config file.
		printf $hw_gpio_handle "%-30s,",$gpio_name;

		#PRINT STEP 2:print gpio number to config file.
		printf $hw_gpio_handle "%-8d,", $gpio_number;

		if($init_function ne "" )
		{
			#PRINT STEP 3:print function to config file.
			if($init_function ne "GPIOMUX_FUNC_GPIO" )
			{
				if($init_function =~ /(\w+)\((\w+)\)/)
				{
					$init_function = $2;
					printf $hw_gpio_handle "GPIOMUX_%-14s,", $init_function;
				}
				else
				{
					die("!!!!ERROR  please enter the correct value of gpio init function!!!!\n");
				}
			}
			#the gpio choose common function 
			else
			{
				if($init_macro eq "")
				{
					die("!!!!ERROR  please enter the value of the gpio macro!!!!\n");
				}
				
				printf $hw_gpio_handle "%-22s,", $init_function;
			}
		}
		else
		{
			printf $hw_gpio_handle "%-22s,", "NOSET";
		}

		#PRINT STEP 4:print strength to config file.
		if($init_strength ne "")
		{
			printf $hw_gpio_handle "GPIOMUX_DRV_%-8s,", $init_strength;
		}
		else
		{
			printf $hw_gpio_handle "%-20s,", "NOSET";
		}

		#PRINT STEP 5:print pull to config file.
		if($init_pull ne "")
		{
			printf $hw_gpio_handle "%-22s,", $pull_map{$init_pull};
		}
		else
		{
			printf $hw_gpio_handle "%-22s,", "NOSET";
		}

		#PRINT STEP 6:print out value to config file.
		if ("$init_direction" eq "OUT")
		{
			if("$init_out_value" eq "H")
			{
				printf $hw_gpio_handle "%-22s,","GPIOMUX_OUT_HIGH";
			}
			elsif("$init_out_value" eq "L")
			{
				
				printf $hw_gpio_handle "%-22s,","GPIOMUX_OUT_LOW";
			}
			else
			{
				die("!!!!ERROR Invalid out value!");
			}
		}
		elsif("$init_direction" eq "IN")
		{
			printf $hw_gpio_handle "%-22s,","GPIOMUX_IN";
		}
		elsif("$init_direction" eq "")
		{
			printf $hw_gpio_handle "%-22s,","NOSET";
		}
		else
		{
			die("!!!!ERROR Invalid direction config!");
		}	

        	###=============================== initial config end ==============================###

        	###=============================== sleep config begin =============================###

	      #PRINT STEP 7:print function to config file.
	      if($sleep_function ne "" )
	      {
	    		if($sleep_function ne "GPIOMUX_FUNC_GPIO" )
			{
				if($sleep_function =~ /(\w+)\((\w+)\)/)
				{
					$sleep_function = $2;
					printf $hw_gpio_handle "GPIOMUX_%-14s,", $sleep_function;
				}
				else
				{
					die("!!!!ERROR  please enter the correct value of gpio sleep function!!!!\n");
				}
			}
			#the gpio choose common function 
			else
			{
				if($sleep_macro eq "")
				{
					die("!!!!ERROR  please enter the value of the gpio macro!!!!\n");
				}
				
				printf $hw_gpio_handle "%-22s,", $sleep_function;
			}
		}
		else
		{
			printf $hw_gpio_handle "%-22s,", "NOSET";
		}

		#PRINT STEP 8:print sleep strength to config file.
		if($sleep_strength ne "")
		{
			printf $hw_gpio_handle "GPIOMUX_DRV_%-8s,", $sleep_strength;
		}
		else
		{
			printf $hw_gpio_handle "%-20s,", "NOSET";
		}

		#PRINT STEP 9:print sleep pull to config file.
	        if ($sleep_pull ne "")
	        {
	        	printf $hw_gpio_handle "%-22s,", $pull_map{$sleep_pull};
	        }
	        else
	        {
	        	printf $hw_gpio_handle "%-22s,", "NOSET";
	        }

	        #PRINT STEP 10:print sleep out value to config file.
	        if ("$sleep_direction" eq "OUT")
	        {
	            if("$sleep_out_value" eq "H")
	            {
	                print $hw_gpio_handle "GPIOMUX_OUT_HIGH";
	            }
	            elsif("$sleep_out_value" eq "L")
	            {
	                print $hw_gpio_handle "GPIOMUX_OUT_LOW";
	            }
	            else
	            {
	                die("!!!!ERROR Invalid out value!");
	            }
	        }
	        elsif("$sleep_direction" eq "IN")
	        {
	            print $hw_gpio_handle "GPIOMUX_IN";
	        }
	        elsif("$sleep_direction" eq "")
	        {
	        	print $hw_gpio_handle "NOSET";
	        }
	        else
	        {
	            die("!!!!ERROR Invalid direction config!");
	        }

        	###=============================== sleep config end ================================###
        
		print $hw_gpio_handle "},";
		printf $hw_gpio_handle "  /* %s */\n", $gpio_pin;
    }
    
    print $hw_gpio_handle "};\n\n";
}

sub gen_gpio_config_for_pmic()
{
	#input parameters
	my ($hw_gpio_handle, $PmSheet, $product_name) = @_;

	my $line_index = 1;
	my $gpio_pin;
	my $direction;
	my $pull;
	my $strength;
	my $vin_sel;
	my $function;
	my $macro;
	my $out_buffer;
	my $out_value;
	my $inv_int_pol;
	my $gpio_number;
	my $gpio_name;
	my %macro_map;
	my $blank_name;

	my $mark = "\"";

	my %pull_map =
	(
		"NO_PULL"               => "PM_GPIO_PULL_NO",
		"PULL_DOWN"          => "PM_GPIO_PULL_DN",
		"PULL_UP_30"          => "PM_GPIO_PULL_UP_30",
		"PULL_UP_1P5"        => "PM_GPIO_PULL_UP_1P5",
		"PULL_UP_31P5"      => "PM_GPIO_PULL_UP_31P5",
		"PULL_UP_1P5_30"   => "PM_GPIO_PULL_UP_1P5_30",
		"NOSET"                  => "NOSET"
	);

	printf $hw_gpio_handle "struct pm_gpio_cfg_t %s_pm_gpio_table[] = {\n",$product_name;
	printf $hw_gpio_handle "%s%-21s%-9s%-31s%-17s%-26s%-23s%-23s%-13s%-24s%-13s%-7s%s\n","  /* ","name","number","direction","output_buffer","output_value","pull","vin_sel","out_strength","function","inv_int_pol","disable_pin","  */";

	while(1)
	{
		$gpio_pin                     = $PmSheet->{Cells}[$line_index][0]->Value;
		$direction                     = $PmSheet->{Cells}[$line_index][1]->Value;
		$pull                            = $PmSheet->{Cells}[$line_index][2]->Value;
		$strength                     = $PmSheet->{Cells}[$line_index][3]->Value;
		$vin_sel                       = $PmSheet->{Cells}[$line_index][4]->Value;
		$function                      = $PmSheet->{Cells}[$line_index][5]->Value;
		$macro                         = $PmSheet->{Cells}[$line_index][6]->Value;
		$out_buffer                   = $PmSheet->{Cells}[$line_index][7]->Value;
		$out_value                   = $PmSheet->{Cells}[$line_index][8]->Value;
		$inv_int_pol                   = $PmSheet->{Cells}[$line_index][9]->Value;

		$gpio_number = $line_index;

		$macro = "$mark$macro$mark";
		$gpio_name = "$mark$mark";
		$blank_name = "$mark$mark";

        	#if the gpio choose qualcomm function,then give it a default gpio macro.
		if($direction ne "")
		{
			if($function ne "PM_GPIO_FUNC_NORMAL" )
			{
				if($function =~ /(\w+)\((\w+)\)/)
				{
					$gpio_name = "$mark$1$mark";
				}
				else
				{
					die("!!!!ERROR  please enter the correct value of gpio function!!!!\n");
				}
			}
			else
			{
				$gpio_name = $macro;
			}
		}	

		if($gpio_name eq $blank_name)
		{
			$gpio_name = $gpio_number;
		}
		
		$macro_map{$gpio_name} = $gpio_number;

		#process next line until there is no gpio config
		$line_index += 1;
	        
		print ".";
		
		#Test if we have read the end of excel file,
		if($line_index > $PmSheet->{MaxRow})
		{
			last;
		}
	}
			       
	foreach $gpio_name(sort keys %macro_map)
	{
		$gpio_number = $macro_map{$gpio_name};

		if ($gpio_number eq $gpio_name)
		{
			$gpio_name = "$mark$mark";
		}
		
		$line_index = $gpio_number;
		
		$gpio_pin                     = $PmSheet->{Cells}[$line_index][0]->Value;
		$direction                     = $PmSheet->{Cells}[$line_index][1]->Value;
		$pull                            = $PmSheet->{Cells}[$line_index][2]->Value;
		$strength                     = $PmSheet->{Cells}[$line_index][3]->Value;
		$vin_sel                       = $PmSheet->{Cells}[$line_index][4]->Value;
		$function                      = $PmSheet->{Cells}[$line_index][5]->Value;
		$macro                         = $PmSheet->{Cells}[$line_index][6]->Value;
		$out_buffer                   = $PmSheet->{Cells}[$line_index][7]->Value;
		$out_value                   = $PmSheet->{Cells}[$line_index][8]->Value;
		$inv_int_pol                   = $PmSheet->{Cells}[$line_index][9]->Value;

		print $hw_gpio_handle "    {";

		#PRINT STEP 1:print gpio name to config file.
		printf $hw_gpio_handle "%-20s,",$gpio_name;

		#PRINT STEP 2:print gpio number to config file.
		printf $hw_gpio_handle "%-8s,",$gpio_number;

		print $hw_gpio_handle "{";

		#PRINT STEP 3:print  direction to config file.
		if("$direction" ne "")
		{
			printf $hw_gpio_handle "PM_GPIO_DIR_%-10s,",$direction;

			#PRINT STEP 4:print  out buffer to config file.
			if($out_buffer ne "")
			{
				printf $hw_gpio_handle "PM_GPIO_OUT_BUF_%-7s,", $out_buffer;
			}
			else
			{
				die("!!!!ERROR  please enter the correct value of pm gpio out_buffer!!!!\n");
			}

			#PRINT STEP 5:print  out value to config file.
			if($out_value eq "H")
			{
				printf $hw_gpio_handle "%-13s,", "1";
			}
			elsif($out_value eq "L")
			{
				printf $hw_gpio_handle "%-13s,", "0";
			}
			else
			{
				die("!!!!ERROR  please enter the correct value of pm gpio out_value!!!!\n");
			}

			#PRINT STEP 6:print  pull to config file.
			if($pull ne "")
			{
				printf $hw_gpio_handle "%-22s,", $pull_map{$pull};
			}
			else
			{
				die("!!!!ERROR  please enter the correct value of pm gpio pull!!!!\n");
			}

			#PRINT STEP 7:print  vin sel to config file.
			if($vin_sel ne "")
			{
				printf $hw_gpio_handle "PM_GPIO_%-8s,",$vin_sel;
			}
			else
			{
				die("!!!!ERROR  please enter the correct value of vin_sel!!!!\n");
			}

			#PRINT STEP 8:print  strength to config file.
			if($strength ne "")
			{
				printf $hw_gpio_handle "PM_GPIO_STRENGTH_%-8s,",$strength;
			}
			else
			{
				die("!!!!ERROR  please enter the correct value of pm gpio strength!!!!\n");
			}

			#PRINT STEP 9:print gpio function to config file.
			if($function ne "")
			{
				if($function =~ /FUNC_(\d+)/)
				{
					printf $hw_gpio_handle "PM_GPIO_%-22s,",$function;
				}
				else
				{
					printf $hw_gpio_handle "%-30s,",$function;
				}
			}
			else
			{
				die("!!!!ERROR  please enter the correct value of pm gpio function!!!!\n");
			}

			#PRINT STEP 10:print  inv_int_pol to config file.
			if ($inv_int_pol eq "ENABLE")
			{
				printf $hw_gpio_handle "%-12s,", "1";
			}
			elsif($inv_int_pol eq "DISABLE")
			{
				printf $hw_gpio_handle "%-12s,", "0";
			}
			else
			{
				die("!!!!ERROR  please enter the correct value of pm gpio inv_int_pol!!!!\n");
			}

			#PRINT STEP 11:print  disable_pin to config file.	
			printf $hw_gpio_handle "%-6s", "0";
		}
		else
		{
			printf $hw_gpio_handle "%-22s,","NOSET";
			printf $hw_gpio_handle "%-23s,", "NOSET";
			printf $hw_gpio_handle "%-13s,", "NOSET";
			printf $hw_gpio_handle "%-22s,", "NOSET";
			printf $hw_gpio_handle "%-16s,","NOSET";
			printf $hw_gpio_handle "%-25s,","NOSET";
			printf $hw_gpio_handle "%-30s,","NOSET";
			printf $hw_gpio_handle "%-12s,", "NOSET";
			printf $hw_gpio_handle "%-6s", "NOSET";
		}
		
		print $hw_gpio_handle "}";
		print $hw_gpio_handle "},";
		printf $hw_gpio_handle "  /* %s */\n", $gpio_pin;
	}

	print $hw_gpio_handle "};\n";
	
}

sub create_total_cfg_table()
{
	my ($hw_gpio_handle, $product_name) = @_;

	print $hw_gpio_handle "\n/* gpio module boardid struct */\n";
	printf $hw_gpio_handle "struct board_id_general_struct config_gpio_%s = {\n",$product_name;
	printf $hw_gpio_handle "	.name = GPIO_MODULE_NAME,\n";
	printf $hw_gpio_handle "	.board_id = BOARD_ID_%s,\n",$product_name;
	printf $hw_gpio_handle "	.data_array = {.gpio_ptr = %s_gpio_config_table},\n",$product_name;
	printf $hw_gpio_handle "	.list = {NULL,NULL},\n";
	printf $hw_gpio_handle "};\n";

	print $hw_gpio_handle "\n/* pm gpio module boardid struct */\n";
	printf $hw_gpio_handle "struct board_id_general_struct config_pm_gpio_%s = {\n",$product_name;
	printf $hw_gpio_handle "	.name = PM_GPIO_MODULE_NAME,\n";
	printf $hw_gpio_handle "	.board_id = BOARD_ID_%s,\n",$product_name;
	printf $hw_gpio_handle "	.data_array = {.pm_gpio_ptr = %s_pm_gpio_table},\n",$product_name;
	printf $hw_gpio_handle "	.list = {NULL,NULL},\n";
	printf $hw_gpio_handle "};\n";
}

sub create_cfg_file_for_all_product()
{
	#input parameters
	my ($root_dir,$Sheet,$product_name,@product_name_list) = @_;

	my $init_macro_handle;
	my $curr_product_name;

	#Open the file of hwgpio.c
	open($init_macro_handle, ">$root_dir/gpio/hwgpio.c") ||
	    die("Failed to open file hwgpio.c for write!");
				
	print $init_macro_handle "/*The file is auto generated by tools, don't modify it manully.*/\n\n";

	foreach $curr_product_name(@product_name_list)
	{
		printf $init_macro_handle "#include \"hwgpio_%s.c\"\n",$curr_product_name;
	}

	#Close the output file
	close($init_macro_handle);	
}

#this is the main function and the beginning
&my_main();


#!/usr/bin/perl -w
#==========================================================================
#Brief Description
# unification scheme of regulators
# auto gen config.c and .h by perl script
# Copyright (c) 2008 - 2010 by Huawei Incorporated.  All Rights Reserved.
#
#==========================================================================

use strict;
use Spreadsheet::ParseExcel;
use Cwd;

sub main()
{
    my $curdir = prepare_perl_dir();
  	my $rootdir = "../../../../device/huawei/customize/hsad";
  	my $subdir;
  	my @dir_root;
    my @dir_sub;
    
    my @file_name_list;
    
    my $count;
    my $power_config_xls;
    my $power_config_file;
    my $product_name;
    my $power_config_gather_file_handle;
    
    opendir(ROOT_DIR, $rootdir) || die "product directory not exist";
    @dir_root = readdir(ROOT_DIR);    
	
		foreach my $dir (@dir_root)
	  {	
		  if(!($dir=~ m/^\./))
		  {
		  	 $subdir = "$rootdir/$dir";
			   if(-d $subdir)
			   {
			   	   opendir(SUB_DIR, $subdir) || die "sub directory not exist";
			       @dir_sub = readdir(SUB_DIR);
			       foreach(@dir_sub)
			       {
				        if(/hw_(\w+)_power_configs.xls/)
				        {
					         $power_config_xls=$_;
					         $power_config_file =$power_config_xls;
					         $power_config_file =~ s/\.xls$/\.c/;
					         
					         if(/hw_(\w+)_power_configs.xls/)
					         {
					         	  $product_name = $1;
					         }
					         		
                    parse_excel($curdir,$subdir,$power_config_xls,$product_name,$power_config_file);
                    push(@file_name_list,$power_config_file);
				         }
				     }
				     closedir(SUB_DIR);
			    }
		   }
	   }
	   closedir(ROOT_DIR);
	       	
     #Create and Open the gather file hw_power.c for all product files
	   open($power_config_gather_file_handle, ">$curdir/hw_power.c") ||die("Failed to open file hw_power.c for write!");			
     print $power_config_gather_file_handle "/*The file is auto generated by scripts, don't modify it manully!*/\n\n";
	   foreach my $curr_file_name(@file_name_list)
	   {
		    printf $power_config_gather_file_handle "#include \"%s\"\n",$curr_file_name;
	   }
     close($power_config_gather_file_handle);	
}

sub prepare_perl_dir()
{
    my $work_dir = getcwd();

    my @dirs = split /\//, $work_dir;
    pop(@dirs);
    $work_dir = join "/", @dirs;
    return "$work_dir/power_config";
}

sub parse_excel()
{
	my ($curdir,$subdir, $power_config_xls, $product_name,$power_config_file) = @_;	
	my  $power_config_file_handle;
	my  $power_config_header_handle;
	
	my $nRPMRegCount = 0;
	my $nPmicRegCount = 0;
	my $nSawRegCount = 0;
	my $nGpioRegCount = 0;
		
	open $power_config_file_handle, ">$curdir/$power_config_file" || die "can't open $power_config_file";
	
	my $oExcel = new Spreadsheet::ParseExcel;
  my $oBook = $oExcel->Parse("$subdir/$power_config_xls");
	my $oSheet = $oBook->{Worksheet}[1];
	
	print $power_config_file_handle "/*********************************************************\n";
	print $power_config_file_handle "CAUTION : This file is Auto Generated by Perl based on *.xls\n";
	print $power_config_file_handle "		so,don't modify this file manually!\n";
	print $power_config_file_handle "*********************************************************/\n\n\n";
  print $power_config_file_handle "#include <hsad/config_general_struct.h>\n";
  print $power_config_file_handle "#include <hsad/config_boardids.h>\n";

	$nRPMRegCount = generic_rpm_power_config($power_config_file_handle,$oSheet,$product_name,$power_config_file);
	$nPmicRegCount = generic_pmic_power_config($power_config_file_handle,$oSheet,$product_name,$power_config_file);
	$nSawRegCount = generic_saw_power_config($power_config_file_handle,$oSheet,$product_name,$power_config_file);
	$nGpioRegCount = generic_ext_power_config($power_config_file_handle,$oSheet,$product_name,$power_config_file);
	
	genarate_final_power_struct($power_config_file_handle,"\U$product_name",$power_config_file,$nRPMRegCount,$nPmicRegCount,$nSawRegCount,$nGpioRegCount);
	
	close $power_config_file_handle;
}

sub generic_rpm_power_config()
{
	my ($power_config_file_handle, $oSheet, $product_name,$power_config_file) = @_;
	
	#解析excel时的索引
	my $index = 1;
	my $i = 0;
	my $count = 1;
	my $tmp_index = 1;
	my $nPowerCount = 0;
	
	my $customer;
	my $power_id;
	my $power_type;
	my $min_uv;
	my $max_uv;
	my $default_uv;
	my $peak_ua;
	my $system_ua;
	my $always_on;
	my $freq;
	my $sleep_selectable;
	my $supply_name;
	my $dev_name;
	my $supply_regulator;
	
	my %hash=();
	
	while(1)
	{
		$customer = $oSheet->{Cells}[$index][0]->Value;
		$power_id = $oSheet->{Cells}[$index][1]->Value;	
		if($power_id eq "" ||($index > $oSheet->{MaxRow}))
		{
			last;
		}
		
		if($customer ne "RPM")
		{
			$index = $index+1;
			next;
		}
		
		$power_type = $oSheet->{Cells}[$index][2]->Value;
		$min_uv = $oSheet->{Cells}[$index][3]->Value;
		$max_uv = $oSheet->{Cells}[$index][4]->Value;
		$default_uv = $oSheet->{Cells}[$index][5]->Value;
		$peak_ua = $oSheet->{Cells}[$index][6]->Value;
		$system_ua = $oSheet->{Cells}[$index][7]->Value;
		$always_on = $oSheet->{Cells}[$index][8]->Value;
		$freq = $oSheet->{Cells}[$index][9]->Value;
		$sleep_selectable = $oSheet->{Cells}[$index][10]->Value;
		$supply_regulator = $oSheet->{Cells}[$index][11]->Value;
		$tmp_index = $index + 1;
		
		while($power_id eq $oSheet->{Cells}[$tmp_index][1]->Value)
		{
			$count ++;
			$tmp_index++;
		}
		$hash{lc($power_id)}="&".lc("\U$product_name")."_".lc($customer)."_".lc($power_id);

		
		$customer =~ tr/A-Z/a-z/;
		$product_name =~ tr/A-Z/a-z/;
		$power_id =~ tr/A-Z/a-z/;
		print $power_config_file_handle "\nstruct regulator_consumer_supply ","\U$product_name","_",$customer,"_","\U$power_id","_supply[] = {\n";
		for($i=0;$i<$count;$i++)
		{
			$supply_name = $oSheet->{Cells}[$index+$i][15]->Value;
			$dev_name = $oSheet->{Cells}[$index+$i][16]->Value;

			print $power_config_file_handle "	{\n";
			if($supply_name eq ""){
				print $power_config_file_handle "\n";
			}
			else{
				print $power_config_file_handle "		.supply = \"$supply_name\",\n";
				if($dev_name eq ""||$dev_name eq "NULL"){
					print $power_config_file_handle "		.dev_name = NULL,\n";
			  }
			  else{
			  	print $power_config_file_handle "		.dev_name = \"$dev_name\",\n";
			  }
			}
	
			print $power_config_file_handle "	},\n";			
		}
		print $power_config_file_handle "};\n";			
		
	  ++$nPowerCount;
	  print $power_config_file_handle "#define ","\U$product_name","_","RPM_REG_INIT_DATA","_","\U$nPowerCount"," \\\n";
	  print $power_config_file_handle "{ \\\n";
	  print $power_config_file_handle "  .init_data = { \\\n";
	  print $power_config_file_handle "     .constraints = { \\\n";
	  print $power_config_file_handle "	      .min_uV =",$min_uv,", \\\n";
		print $power_config_file_handle "	      .max_uV =",$max_uv,", \\\n";
		print $power_config_file_handle "	      .input_uV =",$min_uv,", \\\n";
		print $power_config_file_handle "	      .apply_uV = 0, \\\n";
		print $power_config_file_handle "	      .always_on =",$always_on,", \\\n";
		if($power_type eq "SMPS"){
		  print $power_config_file_handle "	      .valid_modes_mask = REGULATOR_MODE_NORMAL| REGULATOR_MODE_IDLE, \\\n";
		  print $power_config_file_handle "	      .valid_ops_mask = REGULATOR_CHANGE_VOLTAGE| REGULATOR_CHANGE_STATUS| REGULATOR_CHANGE_MODE| REGULATOR_CHANGE_DRMS, \\\n";
		}
		elsif($power_type eq "LDO"){
			print $power_config_file_handle "	      .valid_modes_mask = REGULATOR_MODE_NORMAL| REGULATOR_MODE_IDLE, \\\n";
		  print $power_config_file_handle "	      .valid_ops_mask = REGULATOR_CHANGE_VOLTAGE | REGULATOR_CHANGE_STATUS | REGULATOR_CHANGE_MODE| REGULATOR_CHANGE_DRMS, \\\n";
		}
		elsif($power_type eq "LVS"){
			print $power_config_file_handle "	      .valid_modes_mask = 0, \\\n";
		  print $power_config_file_handle "	      .valid_ops_mask = REGULATOR_CHANGE_STATUS, \\\n";
		}
		elsif($power_type eq "NCP"){
			print $power_config_file_handle "	      .valid_modes_mask = 0, \\\n";
		  print $power_config_file_handle "	      .valid_ops_mask = REGULATOR_CHANGE_VOLTAGE | REGULATOR_CHANGE_STATUS, \\\n";
		}
		print $power_config_file_handle "     }, \\\n";
		print $power_config_file_handle "     .num_consumer_supplies = ARRAY_SIZE(","\U$product_name","_",$customer,"_","\U$power_id","_supply), \\\n";
		print $power_config_file_handle "     .consumer_supplies = ","\U$product_name","_",$customer,"_","\U$power_id","_supply, \\\n";
		if($supply_regulator eq "NULL"){
		  print $power_config_file_handle "     .supply_regulator = NULL, \\\n";
		}
		else{
			print $power_config_file_handle "     .supply_regulator = \"$supply_regulator\", \\\n";
		}
		print $power_config_file_handle "  }, \\\n";
		
		print $power_config_file_handle "  .id = RPM_VREG_ID_PM8921","_","\U$power_id",", \\\n";
		print $power_config_file_handle "  .default_uV = ",$default_uv,", \\\n";
		print $power_config_file_handle "  .peak_uA = ",$peak_ua,", \\\n";
		if($power_type eq "SMPS"){
			print $power_config_file_handle "  .pull_down_enable = 1",", \\\n";
			print $power_config_file_handle "  .avg_uA = 0, \\\n";
			print $power_config_file_handle "  .pin_ctrl = RPM_VREG_PIN_CTRL_NONE, \\\n";
			print $power_config_file_handle "  .power_mode = RPM_VREG_POWER_MODE_8960_PWM, \\\n";
		}
		elsif($power_type eq "LDO"){
			print $power_config_file_handle "  .pull_down_enable = 1",", \\\n";
			print $power_config_file_handle "  .avg_uA = 0, \\\n";
			print $power_config_file_handle "  .pin_ctrl = RPM_VREG_PIN_CTRL_NONE, \\\n";
			print $power_config_file_handle "  .power_mode = RPM_VREG_POWER_MODE_8960_PWM, \\\n";
		}
		elsif($power_type eq "LVS"){
			print $power_config_file_handle "  .pull_down_enable = 1",", \\\n";
			print $power_config_file_handle "  .avg_uA = 1000, \\\n";
			print $power_config_file_handle "  .pin_ctrl = RPM_VREG_PIN_CTRL_NONE, \\\n";
			print $power_config_file_handle "  .power_mode = RPM_VREG_POWER_MODE_8960_PWM, \\\n";
		}
		elsif($power_type eq "NCP"){
			print $power_config_file_handle "  .pull_down_enable = 0",", \\\n";
			print $power_config_file_handle "  .avg_uA = 1000, \\\n";
			print $power_config_file_handle "  .pin_ctrl = RPM_VREG_PIN_CTRL_NONE, \\\n";
			print $power_config_file_handle "  .power_mode = RPM_VREG_POWER_MODE_8960_PWM,\\\n";
		}	
		print $power_config_file_handle "  .freq = RPM_VREG_FREQ","_",$freq,", \\\n";
		print $power_config_file_handle "  .pin_fn = RPM_VREG_PIN_FN_8960_NONE, \\\n";
		print $power_config_file_handle "  .force_mode = RPM_VREG_FORCE_MODE_8960_NONE, \\\n";
		print $power_config_file_handle "  .state = RPM_VREG_STATE_OFF, \\\n";
		print $power_config_file_handle "  .sleep_selectable = ",$sleep_selectable,", \\\n";
		print $power_config_file_handle "  .system_uA = ",$system_ua,", \\\n";
		print $power_config_file_handle "}\n";
	  #====================
		$index =$tmp_index;
		$count = 1;
	}
	print $power_config_file_handle "\n\n\n";
	print $power_config_file_handle "struct rpm_regulator_init_data ","\U$product_name","_","rpm_regulator_init_data[]  = {\n";
	for($i=1;$i<=$nPowerCount;$i++)
	{
		print $power_config_file_handle "\U$product_name","_","RPM_REG_INIT_DATA","_",$i,",\n";
	}
	print $power_config_file_handle "};\n";
	
	$nPowerCount;
}


sub generic_pmic_power_config()
{
	my ($power_config_file_handle, $oSheet, $product_name,$power_config_file) = @_;
	
	#解析excel时的索引
	my $index = 1;
	my $i = 0;
	my $count = 1;
	my $tmp_index = 1;
	my $nPowerCount = 0;
	
	my $customer;
	my $power_id;
	my $power_type;
	my $min_uv;
	my $max_uv;
	my $system_ua;
	my $always_on;
	my $supply_name;
	my $dev_name;
	my $supply_regulator;
	my $enable_time;
	
	my %hash=();
	
	while(1)
	{
		$customer = $oSheet->{Cells}[$index][0]->Value;
		$power_id = $oSheet->{Cells}[$index][1]->Value;
		
		if($power_id eq "" ||($index > $oSheet->{MaxRow}))
		{
			last;
		}
		
		if($customer ne "PMIC")
		{
			$index = $index+1;
			next;
		}
		
		$power_type = $oSheet->{Cells}[$index][2]->Value;
		$min_uv = $oSheet->{Cells}[$index][3]->Value;
		$max_uv = $oSheet->{Cells}[$index][4]->Value;
		$system_ua = $oSheet->{Cells}[$index][7]->Value;
		$always_on = $oSheet->{Cells}[$index][8]->Value;
		$supply_regulator = $oSheet->{Cells}[$index][11]->Value;
		$enable_time = $oSheet->{Cells}[$index][12]->Value;
		$tmp_index = $index + 1;
		
		while($power_id eq $oSheet->{Cells}[$tmp_index][1]->Value)
		{
			$count ++;
			$tmp_index++;
		}
		$hash{lc($power_id)}="&".lc("\U$product_name")."_".lc($customer)."_".lc($power_id);
		
		$customer =~ tr/A-Z/a-z/;
		$product_name =~ tr/A-Z/a-z/;
		$power_id =~ tr/A-Z/a-z/;
		print $power_config_file_handle "\nstatic struct regulator_consumer_supply ","\U$product_name","_",$customer,"_","\U$power_id","_supply[] = {\n";
		for($i=0;$i<$count;$i++)
		{
			$supply_name = $oSheet->{Cells}[$index+$i][15]->Value;
			$dev_name = $oSheet->{Cells}[$index+$i][16]->Value;

			print $power_config_file_handle "	{\n";
			if($supply_name eq ""){
				print $power_config_file_handle "\n";
			}
			else{
				print $power_config_file_handle "		.supply = \"$supply_name\",\n";
				if($dev_name eq ""||$dev_name eq "NULL"){
					print $power_config_file_handle "		.dev_name = NULL,\n";
			  }
			  else{
			  	print $power_config_file_handle "		.dev_name = \"$dev_name\",\n";
			  }
			}
	
			print $power_config_file_handle "	},\n";			
		}
		print $power_config_file_handle "};\n";			
		
	  ++$nPowerCount;
	  print $power_config_file_handle "#define ","\U$product_name","_","PM8921_REG_PDATA","_","\U$nPowerCount"," \\\n";
	  print $power_config_file_handle "{ \\\n";
	  print $power_config_file_handle "  .init_data = { \\\n";
	  print $power_config_file_handle "     .constraints = { \\\n";
	  print $power_config_file_handle "	      .min_uV =",$min_uv,", \\\n";
		print $power_config_file_handle "	      .max_uV =",$max_uv,", \\\n";
		print $power_config_file_handle "	      .input_uV =",$max_uv,", \\\n";
		print $power_config_file_handle "	      .apply_uV = 0, \\\n";
		print $power_config_file_handle "	      .always_on =",$always_on,", \\\n";
		if($power_id eq "l26"){
			print $power_config_file_handle "	      .name = \"8921_l26\", \\\n";
	  }elsif($power_id eq "l27"){
	  	print $power_config_file_handle "	      .name = \"8921_l27\", \\\n";
	  }elsif($power_id eq "l28"){
	  	print $power_config_file_handle "	      .name = \"8921_l28\", \\\n";
	  }elsif($power_id eq "l29"){
	  	print $power_config_file_handle "	      .name = \"8921_l29\", \\\n";
	  }elsif($power_id eq "usb_otg"){
	  	print $power_config_file_handle "	      .name = \"8921_usb_otg\", \\\n";
	  }elsif($power_id eq "hdmi_mvs"){
	  	print $power_config_file_handle "	      .name = \"8921_hdmi_mvs\", \\\n";
	  }else{
	  	print $power_config_file_handle "	      .name = NULL, \\\n";
	  }
		if($power_type eq "LDO"){
		  print $power_config_file_handle "	      .valid_modes_mask = REGULATOR_MODE_NORMAL | REGULATOR_MODE_IDLE, \\\n";
		  print $power_config_file_handle "	      .valid_ops_mask = REGULATOR_CHANGE_VOLTAGE | REGULATOR_CHANGE_STATUS | REGULATOR_CHANGE_MODE | REGULATOR_CHANGE_DRMS, \\\n";
		}
		elsif($power_type eq "LVS"){
			print $power_config_file_handle "	      .valid_modes_mask = 0, \\\n";
		  print $power_config_file_handle "	      .valid_ops_mask = REGULATOR_CHANGE_STATUS, \\\n";
		}
		print $power_config_file_handle "     },\\\n";
		print $power_config_file_handle "     .num_consumer_supplies = ARRAY_SIZE(","\U$product_name","_",$customer,"_","\U$power_id","_supply), \\\n";
		print $power_config_file_handle "     .consumer_supplies = ", "\U$product_name","_",$customer,"_","\U$power_id","_supply, \\\n";
		if($supply_regulator eq "NULL"){
		  print $power_config_file_handle "     .supply_regulator = NULL, \\\n";
		}
		else{
			print $power_config_file_handle "     .supply_regulator = \"$supply_regulator\", \\\n";
		}
		print $power_config_file_handle "  }, \\\n";
		#print $power_config_file_handle "  .id = PM8921_VREG_ID","_","\U$power_id",", \\\n";
		if($power_id eq "l26"){
			print $power_config_file_handle "  .id = 1, \\\n";
	  }elsif($power_id eq "l27"){
	  	print $power_config_file_handle "  .id = 2, \\\n";
	  }elsif($power_id eq "l28"){
	  	print $power_config_file_handle "  .id = 3, \\\n";
	  }elsif($power_id eq "l29"){
	  	print $power_config_file_handle "  .id = 4, \\\n";
	  }elsif($power_id eq "usb_otg"){
	  	print $power_config_file_handle "  .id = 5, \\\n";
	  }elsif($power_id eq "hdmi_mvs"){
	  	print $power_config_file_handle "  .id = 6, \\\n";
	  }else{
	  	print $power_config_file_handle "  .id = 0, \\\n";
	  }
		print $power_config_file_handle "  .pull_down_enable = 1",", \\\n";
		print $power_config_file_handle "  .system_uA = ",$system_ua,", \\\n";
		print $power_config_file_handle "  .enable_time = ",$enable_time,", \\\n";
		print $power_config_file_handle "}\n";
	  #====================
		$index =$tmp_index;
		$count = 1;
	}
	print $power_config_file_handle "\n\n\n";
	print $power_config_file_handle "struct pm8xxx_regulator_platform_data ","\U$product_name","_","pm8921_regulator_pdata[]  = {\n";
	for($i=1;$i<=$nPowerCount;$i++)
	{
		print $power_config_file_handle "\U$product_name","_","PM8921_REG_PDATA","_",$i,",\n";
	}	
	print $power_config_file_handle "};\n";
	
	$nPowerCount;
}


sub generic_saw_power_config()
{
	my ($power_config_file_handle, $oSheet, $product_name,$power_config_file) = @_;
	
	#解析excel时的索引
	my $index = 1;
	my $i = 0;
	my $count = 1;
	my $tmp_index = 1;
	my $nPowerCount = 0;
	
	my $customer;
	my $power_id;
	my $power_type;
	my $min_uv;
	my $max_uv;
	my $supply_regulator;
	my $supply_name;
	my $dev_name;
	
	my %hash=();
	
	while(1)
	{
		$customer = $oSheet->{Cells}[$index][0]->Value;
		$power_id = $oSheet->{Cells}[$index][1]->Value;
		
		if($power_id eq "" ||($index > $oSheet->{MaxRow}))
		{
			last;
		}
		
		if($customer ne "SAW")
		{
			$index = $index+1;
			next;
		}
		
		$power_type = $oSheet->{Cells}[$index][2]->Value;
		$min_uv = $oSheet->{Cells}[$index][3]->Value;
		$max_uv = $oSheet->{Cells}[$index][4]->Value;
		$supply_regulator = $oSheet->{Cells}[$index][11]->Value;
		$tmp_index = $index + 1;
		
		while($power_id eq $oSheet->{Cells}[$tmp_index][1]->Value)
		{
			$count ++;
			$tmp_index++;
		}
	  $hash{lc($power_id)}="&".lc("\U$product_name")."_".lc($customer)."_".lc($power_id);
		
		$customer =~ tr/A-Z/a-z/;
		$product_name =~ tr/A-Z/a-z/;
		$power_id =~ tr/A-Z/a-z/;
		print $power_config_file_handle "\nstatic struct regulator_consumer_supply ","\U$product_name","_",$customer,"_","\U$power_id","_supply[] = {\n";
		for($i=0;$i<$count;$i++)
		{
			$supply_name = $oSheet->{Cells}[$index+$i][15]->Value;
			$dev_name = $oSheet->{Cells}[$index+$i][16]->Value;

			print $power_config_file_handle "	{\n";
			if($supply_name eq ""){
				print $power_config_file_handle "\n";
			}
			else{
				print $power_config_file_handle "		.supply = \"$supply_name\",\n";
				if($dev_name eq ""||$dev_name eq "NULL"){
					print $power_config_file_handle "		.dev_name = NULL,\n";
			  }
			  else{
			  	print $power_config_file_handle "		.dev_name = \"$dev_name\",\n";
			  }
			}
	
			print $power_config_file_handle "	},\n";			
		}
		print $power_config_file_handle "};\n";			
		
	  ++$nPowerCount;
	  print $power_config_file_handle "#define ","\U$product_name","_","SAW_REG_PDATA","_","\U$nPowerCount"," \\\n";
	  print $power_config_file_handle "{ \\\n";
	  print $power_config_file_handle "  .constraints = { \\\n";
	  print $power_config_file_handle "	   .name =\"$supply_regulator\", \\\n";
	  print $power_config_file_handle "	   .min_uV =",$min_uv,", \\\n";
		print $power_config_file_handle "	   .max_uV =",$max_uv,", \\\n";
		print $power_config_file_handle "	   .valid_ops_mask = REGULATOR_CHANGE_VOLTAGE, \\\n";
		print $power_config_file_handle "  }, \\\n";
		print $power_config_file_handle "  .num_consumer_supplies = ARRAY_SIZE(","\U$product_name","_",$customer,"_","\U$power_id","_supply), \\\n";
		print $power_config_file_handle "  .consumer_supplies = ","\U$product_name","_",$customer,"_","\U$power_id","_supply, \\\n";
		print $power_config_file_handle "}\n";
	  #====================
		$index =$tmp_index;
		$count = 1;
	}

	print $power_config_file_handle "\n\n\n";
	print $power_config_file_handle "struct regulator_init_data ","\U$product_name","_","saw_regulator_pdata[]  = {\n";
	for($i=1;$i<=$nPowerCount;$i++)
	{
		print $power_config_file_handle "\U$product_name","_","SAW_REG_PDATA","_",$i,",\n";
	}
	print $power_config_file_handle "};\n";
	
	$nPowerCount;
}

sub generic_ext_power_config()
{
	my ($power_config_file_handle, $oSheet, $product_name,$power_config_file) = @_;
	
	#解析excel时的索引
	my $index = 1;
	my $i = 0;
	my $count = 1;
	my $tmp_index = 1;
	my $nPowerCount = 0;
	
	my $customer;
	my $power_id;
	my $power_type;
	my $supply_regulator;
	my $supply_name;
	my $dev_name;
	my $gpio;
	my $gpio_label;
	
	my %hash=();
	
	while(1)
	{
		$customer = $oSheet->{Cells}[$index][0]->Value;
		$power_id = $oSheet->{Cells}[$index][1]->Value;
		
		if($power_id eq "" ||($index > $oSheet->{MaxRow}))
		{
			last;
		}
		
		if($customer ne "GPIO")
		{
			$index = $index+1;
			next;
		}
		
		$power_type = $oSheet->{Cells}[$index][2]->Value;
		$supply_regulator = $oSheet->{Cells}[$index][11]->Value;
		$gpio = $oSheet->{Cells}[$index][13]->Value;
		$gpio_label = $oSheet->{Cells}[$index][14]->Value;
		$tmp_index = $index + 1;
		
		while($power_id eq $oSheet->{Cells}[$tmp_index][1]->Value)
		{
			$count ++;
			$tmp_index++;
		}

		$hash{lc($power_id)}="&".lc("\U$product_name")."_".lc($customer)."_".lc($power_id);
		
		$customer =~ tr/A-Z/a-z/;
		$product_name =~ tr/A-Z/a-z/;
		$power_id =~ tr/A-Z/a-z/;
		print $power_config_file_handle "\nstruct regulator_consumer_supply ","\U$product_name","_",$customer,"_","\U$power_id","_supply[] = {\n";
		for($i=0;$i<$count;$i++)
		{
			$supply_name = $oSheet->{Cells}[$index+$i][15]->Value;
			$dev_name = $oSheet->{Cells}[$index+$i][16]->Value;

			print $power_config_file_handle "	{\n";
			if($supply_name eq ""){
				print $power_config_file_handle "\n";
			}
			else{
				print $power_config_file_handle "		.supply = \"$supply_name\",\n";
				if($dev_name eq ""||$dev_name eq "NULL"){
					print $power_config_file_handle "		.dev_name = NULL,\n";
			  }
			  else{
			  	print $power_config_file_handle "		.dev_name = \"$dev_name\",\n";
			  }
			}
	
			print $power_config_file_handle "	},\n";			
		}
		print $power_config_file_handle "};\n";				
		
	  ++$nPowerCount;
	  print $power_config_file_handle "#define ","\U$product_name","_","GPIO_REG_PDATA","_","\U$nPowerCount"," \\\n";
	  print $power_config_file_handle "{ \\\n";
	  print $power_config_file_handle "  .init_data = { \\\n";
	  print $power_config_file_handle "     .constraints = { \\\n";
		print $power_config_file_handle "	      .valid_ops_mask = REGULATOR_CHANGE_STATUS, \\\n";
		print $power_config_file_handle "     }, \\\n";
		print $power_config_file_handle "     .num_consumer_supplies = ARRAY_SIZE(","\U$product_name","_",$customer,"_","\U$power_id","_supply), \\\n";
		print $power_config_file_handle "     .consumer_supplies = ","\U$product_name","_",$customer,"_","\U$power_id","_supply, \\\n";
    if($power_id eq "ext_otg_sw"){
	     print $power_config_file_handle "     .supply_regulator = \"8921_usb_otg\", \\\n";
	  }else{
	     print $power_config_file_handle "     .supply_regulator = NULL, \\\n";
	  }
		print $power_config_file_handle "  }, \\\n";
		print $power_config_file_handle "  .regulator_name = \"$supply_regulator\", \\\n";
		print $power_config_file_handle "  .gpio = ",$gpio,", \\\n";
		print $power_config_file_handle "  .gpio_label = \"$gpio_label\", \\\n";
		print $power_config_file_handle "}\n";
	  #====================
		$index =$tmp_index;
		$count = 1;
	}
	print $power_config_file_handle "\n\n\n/*The static struct group msm_saw_regulator_pdata will be useful for Board-msm8960.c*/\n";
	print $power_config_file_handle "struct gpio_regulator_platform_data ","\U$product_name","_","gpio_regulator_pdata[]  = {\n";
	for($i=1;$i<=$nPowerCount;$i++)
	{
		print $power_config_file_handle "\U$product_name","_","GPIO_REG_PDATA","_",$i,",\n";
	}
	print $power_config_file_handle "};\n";
	
	$nPowerCount;
}

sub genarate_final_power_struct()
{
	 my ($power_config_file_handle,$product_name,$power_config_file,$nRPMRegCount,$nPmicRegCount,$nSawRegCount,$nGpioRegCount) = @_;
	 
	 print $power_config_file_handle "\nstruct hw_config_power_tree ","\U$product_name","_power_tree","={\n";
	 print $power_config_file_handle "   .rpm_power_pdata = ","\U$product_name","_","rpm_regulator_init_data",",\n";
	 print $power_config_file_handle "   .pmic_power_pdata = ","\U$product_name","_","pm8921_regulator_pdata",",\n";
	 print $power_config_file_handle "   .saw_power_pdata = ","\U$product_name","_","saw_regulator_pdata",",\n";
	 print $power_config_file_handle "   .gpio_power_pdata = ","\U$product_name","_","gpio_regulator_pdata",",\n";
	 print $power_config_file_handle "   .rpm_reg_num = ",$nRPMRegCount,",\n";
	 print $power_config_file_handle "   .pmic_reg_num = ",$nPmicRegCount,",\n";
	 print $power_config_file_handle "   .saw_reg_num = ",$nSawRegCount,",\n";
	 print $power_config_file_handle "   .gpio_reg_num = ",$nGpioRegCount,",\n";
	 print $power_config_file_handle "};\n";
	 
	 print $power_config_file_handle "\nstruct board_id_general_struct config_power","_","\U$product_name","={\n";
	 print $power_config_file_handle "   .name = ","POWER_MODULE_NAME",",\n";
	 print $power_config_file_handle "   .board_id = BOARD_ID","_","\U$product_name",",\n";
	 print $power_config_file_handle "   .data_array ={\n";
	 print $power_config_file_handle "      .power_tree_ptr = ","&","\U$product_name","_power_tree",",\n";
#	 print $power_config_file_handle "      .power_tree_ptr ={\n";
#	 print $power_config_file_handle "         .rpm_power_pdata = ","\U$product_name","_","rpm_regulator_init_data",",\n";
#	 print $power_config_file_handle "         .pmic_power_pdata = ","\U$product_name","_","pm8921_regulator_pdata",",\n";
#	 print $power_config_file_handle "         .saw_power_pdata = ","\U$product_name","_","saw_regulator_pdata",",\n";
#	 print $power_config_file_handle "         .gpio_power_pdata = ","\U$product_name","_","gpio_regulator_pdata",",\n";
#	 print $power_config_file_handle "      },\n";
	 print $power_config_file_handle "   },\n";
	 print $power_config_file_handle "   .list={NULL,NULL},\n";
	 print $power_config_file_handle "};\n";
}

#start here
&main();

#end
